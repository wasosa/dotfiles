## This script must be sourced, not executed.
## The following will work:
##     . vc.sh 10
##     source vc.sh 10
## But not:
##     ./vc.sh 10
##     sh vc.sh 10
##     bash vc.sh 10

if [ x"$0" = x"$BASH_SOURCE" ] ; then
    echo "ABORTING: This script must be SOURCED (not executed)."
    echo "Try it this way instead:"
    echo
    echo "    source $0 <vc-version>"
    echo
    exit 1
fi

case $(uname -s) in
    CYGWIN*) : ;;
    *) echo "WARNING: this script is only useful on cygwin" ; return 0 ;;
esac

getVsCommonFromRegistry()
{
    VSCOMNNAME=$1
    result=`regtool -qv list "/machine/SYSTEM/CurrentControlSet/Control/Session Manager/Environment" | grep "$VSCOMNNAME" | sed -e 's:.* = ::g' -e 's:"::g'`
    echo "$result"
}

target=x86 # default
   ver=

for arg in $@ ; do
    case $arg in
        x86_amd64|x86|amd64|x86_amd64)
            target=$arg
            ;;
        *64)
            target=x86_amd64 ## x64 cross compiler
            ;;
        *32)
            target=x86
            ;;
        vs2008|2008|vc9|9)
            ver=9
            VSCOMNNAME=VS90COMNTOOLS
            VSCOMMON="$VS90COMNTOOLS"
            ;;
        vs2010|2010|vc10|10)
            ver=10
            VSCOMNNAME=VS100COMNTOOLS
            VSCOMMON="$VS100COMNTOOLS"
            ;;
        vs2012|2012|vc11|11)
            ver=11
            VSCOMNNAME=VS110COMNTOOLS
            VSCOMMON="$VS110COMNTOOLS"
            ;;
        vs2013|2013|vc12|12)
            ver=12
            VSCOMNNAME=VS120COMNTOOLS
            VSCOMMON="$VS120COMNTOOLS"
            ;;
        *)
            echo "WARNING: ignoring unkonwn argument: $arg"
            echo
            ;;
    esac
done

if [ x"$ver" = x ] ; then
    echo "ABORTING: no valid <vc-version> was specified"
    echo
    echo "USAGE: source $BASH_SOURCE <vc-version>"
    return 1
fi


if [ "$VSCOMMON"x = x ] ; then
    VSCOMMON=`getVsCommonFromRegistry $VSCOMNNAME`
fi

if [ "$VSCOMMON"x = x ] ; then
    echo "ABORTING: the environemnt variable ${VSCOMNNAME} is not set"
    return 1
fi

if [ ! -d /tmp ] ; then
    mkdir /tmp
fi

batname=/tmp/vc${ver}-${target}.bat
outname=/tmp/vc${ver}-${target}.out

if [ -f $outname ] ; then

    : ## Try to reuse cached output because when using ssh, vcvarsall.bat
      ## for vc9 does not work ...
else

    echo "@echo off

REM This bat file was generated by: source $0 $@

SET PATH=`cygpath -awS`
SET INCLUDE=
SET LIB=
SET LIBPATH=

CALL \"${VSCOMMON}..\..\VC\vcvarsall.bat\" $target >&2

echo %INCLUDE%
echo %LIB%
echo %LIBPATH%
`cygpath -aw /bin/bash.exe` -c \"echo \$PATH\"

REM End of file
" > $batname

    chmod 777 $batname
    $batname > $outname
    chmod 666 $outname

    if [ $ver -eq 9 ] ; then
        echo
        echo "WARNING: if you are running this from an ssh session, this script may not work."
        echo "         Instead, try running this at least once locally, and then again from ssh"
        echo "         (environment variable values will be saved to $outname)"
        echo
    fi

fi

if [ `cat $outname | wc -l` -ne 4 ] ; then
    echo "ABORTING: Something went wrong: $outname should contain exactly 4 lines"
    return 1
fi

new_INCLUDE=`head -n 1 $outname`
    new_LIB=`head -n 2 $outname | tail -n 1`
new_LIBPATH=`head -n 3 $outname | tail -n 1`
   new_PATH=`head -n 4 $outname | tail -n 1`

if [[ -n $new_INCLUDE && -n $new_LIB && -n $new_LIBPATH && -n $new_PATH ]] ; then
    export INCLUDE=$new_INCLUDE
    export LIB=$new_LIB
    export LIBPATH=$new_LIBPATH
    export PATH=$new_PATH:$PATH ## Keep old stuff on PATH
else
    echo "ABORTING: something went wrong (see $outname)"
    return 1
fi

# rm -f $batname $outname ## keep these around for debugging

## end of file
